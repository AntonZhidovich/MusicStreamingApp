// <auto-generated />
using System;
using Identity.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.DataAccess.Migrations
{
    [DbContext(typeof(UserDBContext))]
    partial class UserDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Identity.DataAccess.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Identity.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "af3c8548-ac9e-43bf-8474-ae514d9780d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af8d93c-9b9b-4e09-bc1d-9ef180915552",
                            CreationDate = new DateTime(2024, 3, 3, 16, 54, 46, 433, DateTimeKind.Utc).AddTicks(8367),
                            Email = "dmitry.ivanov@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Dmitry",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRY.IVANOV@GMAIL.COM",
                            NormalizedUserName = "DMITRY.IVANOV",
                            PasswordHash = "AQAAAAIAAYagAAAAEGnb9gCu0ZszBQAsOO8EfkSggUCxR0fk9mQJdz5Imzxtn6HipugF+ELehdTdFZ3wHg==",
                            PhoneNumberConfirmed = false,
                            Region = "Italy",
                            SecurityStamp = "LHOBZXJKHQASYZODSS7FPA2UQOKTAHDR",
                            TwoFactorEnabled = false,
                            UserName = "dmitry.ivanov"
                        },
                        new
                        {
                            Id = "c13d3c43-7724-4cbd-9226-56fb2fb7e482",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48fa758e-e07d-4abf-83ca-797db1fe3311",
                            CreationDate = new DateTime(2024, 3, 3, 16, 54, 46, 433, DateTimeKind.Utc).AddTicks(8379),
                            Email = "bennington@outlook.com",
                            EmailConfirmed = false,
                            FirstName = "Chester",
                            LastName = "Bennington",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENNINGTON@OUTLOOK.COM",
                            NormalizedUserName = "CHESTER.BENNINGTON",
                            PasswordHash = "AQAAAAIAAYagAAAAECsYLJkr31tTmZasfE+51TiiS2V1NwwmRmFgCtr/p7K0aK6jTznzliXwQVzet9q4PA==",
                            PhoneNumberConfirmed = false,
                            Region = "Los Angeles",
                            SecurityStamp = "ZNUHMAR7OTK2XF4DUDTZUOJVRLP5CKSZ",
                            TwoFactorEnabled = false,
                            UserName = "Chester.Bennington"
                        },
                        new
                        {
                            Id = "98975656-f5e8-42d9-9f6b-58598773e16c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1c51ace-2e20-4ac7-8b56-8799f4c794bb",
                            CreationDate = new DateTime(2024, 3, 3, 16, 54, 46, 433, DateTimeKind.Utc).AddTicks(8464),
                            Email = "MikeShinoda@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Shinoda",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKESHINODA@GMAIL.COM",
                            NormalizedUserName = "MIKESHINODA1977",
                            PasswordHash = "AQAAAAIAAYagAAAAEMleAqjG11pRU4FUv3ReSBj+3QvI5irY8WpzypbgyOD9qhLCgI8IRFiWbB7Gq7O6dw==",
                            PhoneNumberConfirmed = false,
                            Region = "Los Angeles",
                            SecurityStamp = "BGA2JFI5KXTO6565STR4P34F3QPQR2GG",
                            TwoFactorEnabled = false,
                            UserName = "MikeShinoda1977"
                        },
                        new
                        {
                            Id = "6930fd61-ac4f-4fc1-ab3c-8cc9db42aa90",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b975ebc-7954-4be3-91ec-5854ba11b035",
                            CreationDate = new DateTime(2024, 3, 3, 16, 54, 46, 433, DateTimeKind.Utc).AddTicks(8474),
                            Email = "garritsen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            LastName = "Garritsen",
                            LockoutEnabled = false,
                            NormalizedEmail = "GARRITSEN@GMAIL.COM",
                            NormalizedUserName = "MARTIJN_GARRITSEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIdo5ONoHW/GVFfPqonfYe1pGZPGPNA5LZJkbJCs2pw59yHOx8PVxj62thP8RrEH0A==",
                            PhoneNumberConfirmed = false,
                            Region = "Amsterdam",
                            SecurityStamp = "CFSP6QTASV5VVOH2ROTWN7SGSEK3RHFW",
                            TwoFactorEnabled = false,
                            UserName = "Martijn_Garritsen"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f128150c-afbe-472f-af50-0df6d2cb86a1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f95d795a-0d1a-4c38-8323-6f6140f4b54d",
                            Name = "creator",
                            NormalizedName = "CREATOR"
                        },
                        new
                        {
                            Id = "f95d795a-0d1s-4728-8323-ada65d4sa4da",
                            Name = "listener",
                            NormalizedName = "LISTENER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "af3c8548-ac9e-43bf-8474-ae514d9780d6",
                            RoleId = "f128150c-afbe-472f-af50-0df6d2cb86a1"
                        },
                        new
                        {
                            UserId = "af3c8548-ac9e-43bf-8474-ae514d9780d6",
                            RoleId = "f95d795a-0d1a-4c38-8323-6f6140f4b54d"
                        },
                        new
                        {
                            UserId = "af3c8548-ac9e-43bf-8474-ae514d9780d6",
                            RoleId = "f95d795a-0d1s-4728-8323-ada65d4sa4da"
                        },
                        new
                        {
                            UserId = "c13d3c43-7724-4cbd-9226-56fb2fb7e482",
                            RoleId = "f95d795a-0d1a-4c38-8323-6f6140f4b54d"
                        },
                        new
                        {
                            UserId = "98975656-f5e8-42d9-9f6b-58598773e16c",
                            RoleId = "f95d795a-0d1a-4c38-8323-6f6140f4b54d"
                        },
                        new
                        {
                            UserId = "6930fd61-ac4f-4fc1-ab3c-8cc9db42aa90",
                            RoleId = "f95d795a-0d1a-4c38-8323-6f6140f4b54d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Identity.DataAccess.Entities.RefreshToken", b =>
                {
                    b.HasOne("Identity.DataAccess.Entities.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Identity.DataAccess.Entities.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Identity.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Identity.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Identity.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Identity.DataAccess.Entities.User", b =>
                {
                    b.Navigation("RefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
