// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicService.Infrastructure.Data;

#nullable disable

namespace MusicService.Infrastructure.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20240226121940_AdjustedUserEntity")]
    partial class AdjustedUserEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorRelease", b =>
                {
                    b.Property<string>("AuthorsId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReleasesId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuthorsId", "ReleasesId");

                    b.HasIndex("ReleasesId");

                    b.ToTable("AuthorRelease");
                });

            modelBuilder.Entity("GenreSong", b =>
                {
                    b.Property<string>("GenresId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SongsId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenresId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("GenreSong");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BrokenAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBroken")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "e372c6da-4c4d-4cd5-a1ca-c8507cf2d326",
                            BrokenAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 2, 26, 15, 19, 40, 580, DateTimeKind.Local).AddTicks(2768),
                            Description = "Linkin Park is an American rock band from Agoura Hills, California. The band's current lineup comprises vocalist/rhythm guitarist/keyboardist Mike Shinoda, lead guitarist Brad Delson, bassist Dave Farrell, DJ/turntables Joe Hahn and drummer Rob Bourdon, all of whom are founding members.",
                            IsBroken = false,
                            Name = "Linkin park"
                        },
                        new
                        {
                            Id = "7bfe40e0-f945-487b-ae93-a07cfbdc87db",
                            BrokenAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 2, 26, 15, 19, 40, 580, DateTimeKind.Local).AddTicks(2781),
                            Description = "Dutch electronic music producer whose multi-platinum dance anthems topped charts around the globe.",
                            IsBroken = false,
                            Name = "Martin Garrix"
                        });
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Release", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DurationMinutes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReleasedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SongsCount")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Song", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DurationMinutes")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ReleaseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "70d71f5a-a4ef-488a-b4e9-eb86f82481a8",
                            AuthorId = "e372c6da-4c4d-4cd5-a1ca-c8507cf2d326",
                            Roles = "[\"creator\",\"listener\",\"admin\"]",
                            UserName = "Chester.Bennington"
                        },
                        new
                        {
                            Id = "7b761e59-78f3-4862-b1ad-87065bc8f51b",
                            AuthorId = "7bfe40e0-f945-487b-ae93-a07cfbdc87db",
                            Roles = "[\"creator\",\"listener\"]",
                            UserName = "Martijn-Garritsen"
                        },
                        new
                        {
                            Id = "d480a3c1-99aa-4775-819b-94e9183d0e21",
                            AuthorId = "e372c6da-4c4d-4cd5-a1ca-c8507cf2d326",
                            Roles = "[\"creator\",\"listener\"]",
                            UserName = "MikeShinoda1977"
                        },
                        new
                        {
                            Id = "76ef2410-4e2e-4542-a20b-b0f19dfd5d76",
                            Roles = "[\"listener\"]",
                            UserName = "dmitry.ivanov"
                        },
                        new
                        {
                            Id = "3e4cc735-f041-424d-9ada-f835a7c1978a",
                            Roles = "[\"listener\",\"admin\"]",
                            UserName = "yegor.kozlov02"
                        });
                });

            modelBuilder.Entity("AuthorRelease", b =>
                {
                    b.HasOne("MusicService.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicService.Domain.Entities.Release", null)
                        .WithMany()
                        .HasForeignKey("ReleasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreSong", b =>
                {
                    b.HasOne("MusicService.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicService.Domain.Entities.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Song", b =>
                {
                    b.HasOne("MusicService.Domain.Entities.Release", "Release")
                        .WithMany("Songs")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.User", b =>
                {
                    b.HasOne("MusicService.Domain.Entities.Author", "Author")
                        .WithMany("Users")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Author", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MusicService.Domain.Entities.Release", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
